from moviepy import VideoFileClip
from PIL import Image
import imagehash
from datetime import timedelta
from intervaltree import Interval, IntervalTree
import os

def format_timestamp(seconds):
    td = timedelta(seconds=int(seconds))
    return str(td)

def safe_filename(ts1, ts2):
    return f"{ts1.replace(':', '-')}_to_{ts2.replace(':', '-')}.png"

def parse_timestamp(ts):
    h, m, s = map(int, ts.split(":"))
    return h * 3600 + m * 60 + s

def extract_distinct_frames_with_tree(video_path):
    clip = VideoFileClip(video_path)
    duration = int(clip.duration)

    tree = IntervalTree()
    previous_hash = None
    start_time = None
    last_img = None

    for sec in range(0, duration + 1):
        frame = clip.get_frame(sec)
        img = Image.fromarray(frame)
        current_hash = imagehash.phash(img)

        if previous_hash is None:
            previous_hash = current_hash
            start_time = sec
            last_img = img
            continue

        if current_hash - previous_hash > 5:
            end_time = sec
            tree.add(Interval(start_time, end_time, last_img))
            start_time = end_time
            last_img = img
            previous_hash = current_hash

    if start_time is not None:
        tree.add(Interval(start_time, duration, last_img))

    return tree

def query_transcript_frames(tree, transcript_intervals, save_dir):


    for idx, (start_ts, end_ts) in enumerate(transcript_intervals, 1):
        start_sec = parse_timestamp(start_ts)
        end_sec = parse_timestamp(end_ts)
        overlaps = sorted(tree[start_sec:end_sec])

        print(f"\nTranscript interval: ({start_ts} --> {end_ts})")
        for iv in overlaps:
            s = format_timestamp(iv.begin)
            e = format_timestamp(iv.end)
            print(f"  Matched Frame Interval: ({s} --> {e})")

            filename = safe_filename(s, e)
            path = os.path.join(save_dir, filename)
            iv.data.save(path)
            print(f"    â†’ Saved as: {filename}")

# === USAGE ===

video_path = "D:/random.mp4"
save_dir= "D:\Video_frames"
tree = extract_distinct_frames_with_tree(video_path)

transcript_intervals = [
    ("0:00:05", "0:00:25"),
    ("0:00:35", "0:00:55"),
    ("0:01:00", "0:01:25")
]

query_transcript_frames(tree, transcript_intervals,save_dir)
