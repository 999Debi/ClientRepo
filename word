from celery import Celery
import redis
import time
import json

celery_app = Celery("worker", broker="redis://localhost:6379/0")

r = redis.Redis()

@celery_app.task
def process_video_task(file_path, task_id):
    # Simulate video processing
    time.sleep(10)
    result = {
        "task_id": task_id,
        "summary": f"Processed summary for {file_path}"
    }
    # Push result to Redis Stream
    r.xadd("video_results", {"data": json.dumps(result)}, maxlen=1000)

from fastapi import FastAPI, UploadFile, BackgroundTasks
import uuid
import shutil
from celery_worker import process_video_task
import asyncio
import json
import redis
import asyncpg

app = FastAPI()

r = redis.Redis()

# Connect PostgreSQL
async def store_result_in_db(task_id, summary):
    conn = await asyncpg.connect("postgresql://user:pass@localhost/db")
    await conn.execute("INSERT INTO results (task_id, summary) VALUES ($1, $2)", task_id, summary)
    await conn.close()

# Background Redis Stream Listener
async def redis_stream_listener():
    last_id = "0-0"
    while True:
        try:
            results = r.xread({"video_results": last_id}, block=5000, count=10)
            for stream_key, messages in results:
                for msg_id, data in messages:
                    last_id = msg_id
                    payload = json.loads(data[b'data'].decode())
                    await store_result_in_db(payload["task_id"], payload["summary"])
        except Exception as e:
            print(f"Error: {e}")
        await asyncio.sleep(1)

@app.on_event("startup")
async def startup_event():
    loop = asyncio.get_event_loop()
    loop.create_task(redis_stream_listener())

@app.post("/upload/")
async def upload_file(file: UploadFile, background_tasks: BackgroundTasks):
    file_id = str(uuid.uuid4())
    file_path = f"uploads/{file_id}_{file.filename}"
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    process_video_task.delay(file_path, file_id)
    return {"task_id": file_id, "status": "Processing started"}
