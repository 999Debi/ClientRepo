def ticks_to_time_str(ticks):
    total_ms = ticks / 10_000  # 1 tick = 100ns
    hours = int(total_ms // 3600000)
    minutes = int((total_ms % 3600000) // 60000)
    seconds = int((total_ms % 60000) // 1000)
    milliseconds = int(total_ms % 1000)
    return f"{hours:02}:{minutes:02}:{seconds:02}.{milliseconds:03}"

def conversation_transcriber_transcribed_cb(evt: speechsdk.SpeechRecognitionEventArgs):
    if evt.result.reason == speechsdk.ResultReason.RecognizedSpeech:
        offset_ticks = evt.result.offset
        duration_ticks = evt.result.duration
        start_time = ticks_to_time_str(offset_ticks)
        end_time = ticks_to_time_str(offset_ticks + duration_ticks)
        speaker = evt.result.speaker_id
        text = evt.result.text
        print(f"({start_time} --> {end_time}) speaker {speaker} : {text}")
    elif evt.result.reason == speechsdk.ResultReason.NoMatch:
        print(f"NOMATCH: Speech could not be TRANSCRIBED: {evt.result.no_match_details}")
